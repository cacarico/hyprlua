#!/usr/bin/env lua

-- bin/hyprlua
-- Hyprlua CLI: Generate Hyprland configuration using Lua scripts.

local argparse = require("argparse")
local hyprlua = require("runtime.hyprlua")
local logs = require("runtime.libs.logs")

-- Helper function to check if a file exists and is readable
local function file_exists(path)
	local file = io.open(path, "r")
	if file then
		file:close()
		return true
	end
	return false
end

-- Main function encapsulating CLI logic
local function main()
	-- Initialize argument parser
	local parser = argparse("hyprlua", "Generate Hyprland configuration using Lua.")
	local default_hyprland_lua_file = "hyprland.lua"
	local default_hyprlua_conf_file = "hyprlua.conf"

	parser:option("-c --config", "Path to the config.lua file"):args(1):default(default_hyprland_lua_file)
	parser:option("-o --output", "Path to the output hyprland.conf file"):args(1):default(default_hyprlua_conf_file)
  parser.flag("-d --defaults", "Adds default Hyprlua configuration to file")
	parser:flag("-v --verbose", "Enable verbose output")
	parser:flag("-h --help", "Show help message")

	-- Parse arguments
	local args = parser:parse()

	local config_file = args.config
  local merge_defaults = args.defaults
	local output_file = args.output
	local verbose = args.verbose

	-- -- Verbose logging function
	-- local function log_verbose(message)
	-- 	if verbose then
	-- 		logs.print_colored(logs.colors.cyan, "[Verbose] " .. message)
	-- 	end
	-- end

	-- Validate config file existence
	if not file_exists(config_file) and not merge_defaults then
      logs.error(string.format("Error: Configuration file '%s' does not exist, you can add -d to generate the default hyprlua configuration file.", config_file))
      os.exit(1)
	end
	-- log_verbose(string.format("Found configuration file: %s", config_file))

	-- Define custom environment for config.lua
	local env = {
		hyprlua = hyprlua,
	}

	setmetatable(env, { __index = _G })

	-- Load config.lua as a chunk with the custom environment
	local chunk, load_err = loadfile(config_file, "bt", env)
	if not chunk then
		logs.error(string.format("Error loading config file: %s", load_err))
		os.exit(1)
	end
	-- log_verbose("Successfully loaded config.lua")

	-- Execute the chunk within a protected call
	local success, exec_err = pcall(chunk)
	if not success then
		logs.error(string.format("Error executing config file: %s", exec_err))
		os.exit(1)
	end
	-- log_verbose("Successfully executed config.lua")

	-- Write the configuration to the output file
	local write_success, write_err = hyprlua.write_to_file(output_file)
	if not write_success then
		logs.error(string.format("Error writing configuration: %s", write_err))
		os.exit(1)
	end
	-- log_verbose(string.format("Configuration written to '%s'", output_file))

	-- Success message
	logs.print(string.format("Hyprland configuration generated successfully at '%s'.", output_file))
end

-- Execute main function within a protected call to handle unforeseen errors
local status, err = pcall(main)
if not status then
	logs.print("An unexpected error occurred:")
	logs.error(err)
	os.exit(1)
end
